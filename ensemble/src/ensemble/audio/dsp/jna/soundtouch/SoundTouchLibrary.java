package ensemble.audio.dsp.jna.soundtouch;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.Convention.Style;
import org.bridj.ann.Convention;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
// TODO: Auto-generated Javadoc
/**
 * Wrapper for library <b>SoundTouch</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("SoundTouch") 
@Runtime(CRuntime.class) 
public class SoundTouchLibrary {
	static {
		BridJ.register();
	}
	
	/**
	 * Create a new instance of SoundTouch processor.<br>
	 * Original signature : <code>HANDLE soundtouch_createInstance()</code><br>
	 * <i>native declaration : SoundTouchDLL.h:6</i>
	 *
	 * @return the pointer
	 */
	@Convention(Convention.Style.StdCall) 
	public static native Pointer<? > soundtouch_createInstance();
	
	/**
	 * Destroys a SoundTouch processor instance.<br>
	 * Original signature : <code>void soundtouch_destroyInstance(HANDLE)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:11</i>
	 *
	 * @param h the h
	 */
	@Convention(Convention.Style.StdCall) 
	public static native void soundtouch_destroyInstance(Pointer<? > h);
	
	/**
	 * Get SoundTouch library version string<br>
	 * Original signature : <code>char* soundtouch_getVersionString()</code><br>
	 * <i>native declaration : SoundTouchDLL.h:16</i>
	 *
	 * @return the pointer
	 */
	@Convention(Convention.Style.StdCall) 
	public static native Pointer<Byte > soundtouch_getVersionString();
	
	/**
	 * environments that can't properly handle character string as return value<br>
	 * Original signature : <code>void soundtouch_getVersionString2(char*, int)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:21</i>
	 *
	 * @param versionString the version string
	 * @param bufferSize the buffer size
	 */
	@Convention(Convention.Style.StdCall) 
	public static native void soundtouch_getVersionString2(Pointer<Byte > versionString, int bufferSize);
	
	/**
	 * Get SoundTouch library version Id<br>
	 * Original signature : <code>int soundtouch_getVersionId()</code><br>
	 * <i>native declaration : SoundTouchDLL.h:26</i>
	 *
	 * @return the int
	 */
	@Convention(Convention.Style.StdCall) 
	public static native int soundtouch_getVersionId();
	
	/**
	 * represent slower rate, larger faster rates.<br>
	 * Original signature : <code>void soundtouch_setRate(HANDLE, float)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:31</i>
	 *
	 * @param h the h
	 * @param newRate the new rate
	 */
	@Convention(Convention.Style.StdCall) 
	public static native void soundtouch_setRate(Pointer<? > h, float newRate);
	
	/**
	 * represent slower tempo, larger faster tempo.<br>
	 * Original signature : <code>void soundtouch_setTempo(HANDLE, float)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:36</i>
	 *
	 * @param h the h
	 * @param newTempo the new tempo
	 */
	@Convention(Convention.Style.StdCall) 
	public static native void soundtouch_setTempo(Pointer<? > h, float newTempo);
	
	/**
	 * to the original rate (-50 .. +100 %);<br>
	 * Original signature : <code>void soundtouch_setRateChange(HANDLE, float)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:41</i>
	 *
	 * @param h the h
	 * @param newRate the new rate
	 */
	@Convention(Convention.Style.StdCall) 
	public static native void soundtouch_setRateChange(Pointer<? > h, float newRate);
	
	/**
	 * to the original tempo (-50 .. +100 %);<br>
	 * Original signature : <code>void soundtouch_setTempoChange(HANDLE, float)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:46</i>
	 *
	 * @param h the h
	 * @param newTempo the new tempo
	 */
	@Convention(Convention.Style.StdCall) 
	public static native void soundtouch_setTempoChange(Pointer<? > h, float newTempo);
	
	/**
	 * represent lower pitches, larger values higher pitch.<br>
	 * Original signature : <code>void soundtouch_setPitch(HANDLE, float)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:51</i>
	 *
	 * @param h the h
	 * @param newPitch the new pitch
	 */
	@Convention(Convention.Style.StdCall) 
	public static native void soundtouch_setPitch(Pointer<? > h, float newPitch);
	
	/**
	 * (-1.00 .. +1.00);<br>
	 * Original signature : <code>void soundtouch_setPitchOctaves(HANDLE, float)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:56</i>
	 *
	 * @param h the h
	 * @param newPitch the new pitch
	 */
	@Convention(Convention.Style.StdCall) 
	public static native void soundtouch_setPitchOctaves(Pointer<? > h, float newPitch);
	
	/**
	 * (-12 .. +12);<br>
	 * Original signature : <code>void soundtouch_setPitchSemiTones(HANDLE, float)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:61</i>
	 *
	 * @param h the h
	 * @param newPitch the new pitch
	 */
	@Convention(Convention.Style.StdCall) 
	public static native void soundtouch_setPitchSemiTones(Pointer<? > h, float newPitch);
	
	/**
	 * Sets the number of channels, 1 = mono, 2 = stereo<br>
	 * Original signature : <code>void soundtouch_setChannels(HANDLE, unsigned int)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:66</i>
	 *
	 * @param h the h
	 * @param numChannels the num channels
	 */
	@Convention(Convention.Style.StdCall) 
	public static native void soundtouch_setChannels(Pointer<? > h, int numChannels);
	
	/**
	 * Sets sample rate.<br>
	 * Original signature : <code>void soundtouch_setSampleRate(HANDLE, unsigned int)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:71</i>
	 *
	 * @param h the h
	 * @param srate the srate
	 */
	@Convention(Convention.Style.StdCall) 
	public static native void soundtouch_setSampleRate(Pointer<? > h, int srate);
	
	/**
	 * in the middle of a sound stream.<br>
	 * Original signature : <code>void soundtouch_flush(HANDLE)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:76</i>
	 *
	 * @param h the h
	 */
	@Convention(Convention.Style.StdCall) 
	public static native void soundtouch_flush(Pointer<? > h);
	
	/**
	 * calling this function, otherwise throws a runtime_error exception.<br>
	 * Original signature : <code>void soundtouch_putSamples(HANDLE, const float*, unsigned int)</code><br>
	 *
	 * @param h the h
	 * @param samples < Pointer to sample buffer.<br>
	 * @param numSamples < Number of samples in buffer. Notice<br>
	 * <i>native declaration : SoundTouchDLL.h:83</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static native void soundtouch_putSamples(Pointer<? > h, Pointer<Float > samples, int numSamples);
	
	/**
	 * buffers.<br>
	 * Original signature : <code>void soundtouch_clear(HANDLE)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:88</i>
	 *
	 * @param h the h
	 */
	@Convention(Convention.Style.StdCall) 
	public static native void soundtouch_clear(Pointer<? > h);
	
	/**
	 * \return 'TRUE' if the setting was succesfully changed<br>
	 * Original signature : <code>BOOL soundtouch_setSetting(HANDLE, int, int)</code><br>.
	 *
	 * @param h the h
	 * @param settingId < Setting ID number. see SETTING_... defines.<br>
	 * @param value < New setting value.<br>
	 * <i>native declaration : SoundTouchDLL.h:95</i>
	 * @return the int
	 */
	@Convention(Convention.Style.StdCall) 
	public static native int soundtouch_setSetting(Pointer<? > h, int settingId, int value);
	
	/**
	 * \return the setting value.<br>
	 * Original signature : <code>int soundtouch_getSetting(HANDLE, int)</code><br>
	 *
	 * @param h the h
	 * @param settingId < Setting ID number, see SETTING_... defines.<br>
	 * <i>native declaration : SoundTouchDLL.h:101</i>
	 * @return the int
	 */
	@Convention(Convention.Style.StdCall) 
	public static native int soundtouch_getSetting(Pointer<? > h, int settingId);
	
	/**
	 * Returns number of samples currently unprocessed.<br>
	 * Original signature : <code>int soundtouch_numUnprocessedSamples(HANDLE)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:106</i>
	 *
	 * @param h the h
	 * @return the int
	 */
	@Convention(Convention.Style.StdCall) 
	public static native int soundtouch_numUnprocessedSamples(Pointer<? > h);
	
	/**
	 * with 'ptrBegin' function.<br>
	 * Original signature : <code>int soundtouch_receiveSamples(HANDLE, float*, unsigned int)</code><br>
	 *
	 * @param h the h
	 * @param outBuffer < Buffer where to copy output samples.<br>
	 * @param maxSamples < How many samples to receive at max.<br>
	 * <i>native declaration : SoundTouchDLL.h:113</i>
	 * @return the int
	 */
	@Convention(Convention.Style.StdCall) 
	public static native int soundtouch_receiveSamples(Pointer<? > h, Pointer<Float > outBuffer, int maxSamples);
	
	/**
	 * Returns number of samples currently available.<br>
	 * Original signature : <code>int soundtouch_numSamples(HANDLE)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:118</i>
	 *
	 * @param h the h
	 * @return the int
	 */
	@Convention(Convention.Style.StdCall) 
	public static native int soundtouch_numSamples(Pointer<? > h);
	
	/**
	 * Returns nonzero if there aren't any samples available for outputting.<br>
	 * Original signature : <code>int soundtouch_isEmpty(HANDLE)</code><br>
	 * <i>native declaration : SoundTouchDLL.h:123</i>
	 *
	 * @param h the h
	 * @return the int
	 */
	@Convention(Convention.Style.StdCall) 
	public static native int soundtouch_isEmpty(Pointer<? > h);
}
